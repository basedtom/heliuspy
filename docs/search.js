window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "heliuspy", "modulename": "heliuspy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "heliuspy.HeliusAPI", "modulename": "heliuspy", "qualname": "HeliusAPI", "kind": "class", "doc": "<p></p>\n", "bases": "heliuspy.api_versions.rpc20.ApiRPC20, heliuspy.api_versions.v0.Apiv0"}, {"fullname": "heliuspy.HeliusAPI.__init__", "modulename": "heliuspy", "qualname": "HeliusAPI.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">request_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;RPC20-&#39;</span></span>)</span>"}, {"fullname": "heliuspy.api_versions", "modulename": "heliuspy.api_versions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.rpc20", "modulename": "heliuspy.api_versions.rpc20", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.__init__", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">request_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;RPC20-&#39;</span></span>)</span>"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.base_rpc_url", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.base_rpc_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.api_key_query", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.api_key_query", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.request_id", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.request_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.request_prefix", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.request_prefix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.get_token_accounts", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.get_token_accounts", "kind": "function", "doc": "<p>Retrieve all the token accounts associated with a specific mint or owner account.\nThis is an efficient way to get all the owners of an SPL token or all tokens owned by a particular address.\nYou can use the showZeroBalanceflag to include empty token accounts.</p>\n\n<p>Helius Doc: <a href=\"https://docs.helius.dev/compression-and-das-api/digital-asset-standard-das-api/get-token-accounts\">https://docs.helius.dev/compression-and-das-api/digital-asset-standard-das-api/get-token-accounts</a></p>\n\n<p>Args:\n    mint (str): The mint address key.\n    owner (str): The owner address key.\n    page (int): The page of results to return.\n    limit (int): The maximum number of assets to return.\n    cursor (str): The cursor used for pagination.\n    before (str): Returns results before the specified cursor.\n    after (str): Returns results after the specified cursor.\n    objects (obj):\n                    showZeroBalance (bool): If true, show accounts with empty token balances.</p>\n\n<p>Returns:\n    An object with the following keys:</p>\n\n<pre><code>jsonrpc (str): rpc version\nresult (obj) :\n                total (int)          : The number of results found for the request.\n                limit (int)          : The maximum number of results requested.\n                cursor(str)          : The cursor used for pagination.\n                token_accounts (list): An array of token accounts.\n                    address (str)         : The address of the token account.\n                    mint (str)            : The address of the mint account.\n                    owner (str)           : The address of the token account owner.\n                    amount (int)          : Number of tokens in the account.\n                    delegated_amount (int): Number of delegated tokens in the account.\n                    frozen (bool)         : If the account is frozen.\nid (any)     : ID used in the request\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.get_signatures_for_address", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.get_signatures_for_address", "kind": "function", "doc": "<p>Returns signatures for confirmed transactions that include the given address in their accountKeys list.\nReturns signatures backwards in time from the provided signature or most recent confirmed block</p>\n\n<p>Helius Doc: <a href=\"https://docs.helius.dev/rpc/http/getsignaturesforaddress\">https://docs.helius.dev/rpc/http/getsignaturesforaddress</a></p>\n\n<p>Args:\n    address (str): The address to query.\n    limit (int): Limit results\n    before (str): Returns results before the specified signature.\n    until (str): Returns results after the specified signature.\nReturns:\n    An object with the following keys:</p>\n\n<pre><code>jsonrpc (str): rpc version\nresult (list of objs):\n        signature (str):  Transaction signature as a base-58 encoded string.\n        slot (int) The slot that contains the block with the transaction.\n        err (obj): Error if the transaction failed, or null if successful.\n        memo (str): Memo associated with the transaction, or null if none.\n        blockTime (int): Estimated production time as Unix timestamp, or null if not available.\n        confirmationStatus (str): Transaction's cluster confirmation status. e.g. \"finalized\"\nid (any): ID used in the request\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">address</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.get_account_info", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.get_account_info", "kind": "function", "doc": "<p>Returns all information associated with the account of provided Pubkey</p>\n\n<p>Helius Doc: <a href=\"https://docs.helius.dev/rpc/http/getaccountinfo\">https://docs.helius.dev/rpc/http/getaccountinfo</a></p>\n\n<p>Args:\n    address (str): The address to query.\n    limit (int): Limit results</p>\n\n<p>Returns:\n    An object with the following keys:</p>\n\n<pre><code>jsonrpc (str): rpc version\nresult (obj):\n        context (obj):  Context of the request.\n            apiVersion (str): API version of the request.\n            slot (int): Slot number of the response.\n        value (obj):\n            data (str):\n            executable (bool):\n            lamports (int):\n            owner (str):\n            rentEpoch (int):\n            space (int):\nid (any): ID used in the request\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">address</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.get_latest_blockhash", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.get_latest_blockhash", "kind": "function", "doc": "<p>Returns the latest blockhash</p>\n\n<p>Helius Doc: <a href=\"https://docs.helius.dev/rpc/http/getlatestblockhash\">https://docs.helius.dev/rpc/http/getlatestblockhash</a></p>\n\n<p>Args:\n    commitment (str, optional): The commitment level for the request.\n                            Options: confirmed, finalized, processed\n    minContextSlot (int, optional): The minimum slot that the request can be evaluated at. E.g. 1000</p>\n\n<p>Returns:\n    An object with the following keys:</p>\n\n<pre><code>jsonrpc (str): rpc version\nresult (obj) :\n        context (obj):  Context of the request.\n            slot (int): Slot number of the response.\n            apiVersion (str): API version of the request.\n        value (obj):\n            blockhash (str): A hash as a base-58 encoded string.\n            lastValidBlockHeight (int): The last block height at which the blockhash will be valid.\nid (any): ID used in the request\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.get_block", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.get_block", "kind": "function", "doc": "<p>Returns identity and transaction information about a confirmed block in the ledger</p>\n\n<p>Helius Doc: <a href=\"https://docs.helius.dev/rpc/http/getblock\">https://docs.helius.dev/rpc/http/getblock</a></p>\n\n<p>Args:\n    slot_number (str): Slot number as a u64 integer.\n    commitment (str, optional): The commitment level for the request. Defaults to \"finalized\"\n                        Options: confirmed, finalized, processed\n    encoding (str, optional): The encoding format for each returned transaction. Defaults to \"json\"\n                        Options: json, jsonParsed, base58, base64\n    transactionDetails (str, optional): Level of transaction detail to return. Defaults to \"full\"\n                                Options: full, accounts, signatures, none</p>\n\n<pre><code>maxSupportedTransactionVersion (int, optional): Maximum transaction version to return in responses.\n                                                 Defaults to 1\nrewards (bool, optional): Whether to populate the rewards array. Defaults to True\n</code></pre>\n\n<p>Returns:\n    An object with the following keys:</p>\n\n<pre><code>jsonrpc (str): rpc version\nresult (obj) :\n        blockhash (str)            : The blockhash of this block (base-58 encoded string).\n        previousBlockhash (str)    : The blockhash of the block's parent.\n        parentSlot (int)           : The slot index of this block's parent.\n        transactions (list of objs): Array of transaction details if full transaction details are\n                                     requested.\n                transaction (obj)       : Transaction details in the requested encoding format.\n                meta (obj)              : Metadata associated with the transaction.\n                            fee (int)              : Fee charged for the transaction.\n                            preBalances (list)     : Array of account balances before the transaction.\n                            postBalances (list)    : Array of account balances after the transaction.\n                            rewards (list of objs) : Rewards for the transaction, if requested.\n                                    commission (int)   :\n                                    postBalance (int)  :\n                                    pubkey(str)        : The public key of the account that received the\n                                                          reward.\n                                    lamports (int)     : Number of reward lamports credited or debited.\n                                    rewardType (str)   : Type of reward (e.g., \"fee\", \"rent\").\n\n        blockTime (int)            : Estimated production time as Unix timestamp.\n        blockHeight (int)          : Number of blocks beneath this block.\nid (any): ID used in the request\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">slot_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.get_asset", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.get_asset", "kind": "function", "doc": "<p>Get an asset by its ID.</p>\n\n<p>This method will return all relevant information, including metadata for a given Token or Any NFT (cNFT, pNFT,\ncore NFT).</p>\n\n<p>To support tokens (Fungible Extensions), set the showFungible flag to true.</p>\n\n<p>You can optionally display inscription and SPL-20 token data with the showInscription flag.</p>\n\n<p>Helius Doc: <a href=\"https://docs.helius.dev/compression-and-das-api/digital-asset-standard-das-api/get-asset\">https://docs.helius.dev/compression-and-das-api/digital-asset-standard-das-api/get-asset</a></p>\n\n<p>Args:\n    id (str)                                    : An ID to identify the request.\n    showUnverifiedCollections (bool, optional)  : Displays grouping information for unverified collections\n                                                    instead of skipping them. Defaults to False.\n    showCollectionMetadata (bool, optional)     : Displays metadata for the collection. Defaults to False.\n    showFungible (bool, optional)               : Displays fungible tokens held by the owner.\n                                                    Defaults to False.\n    showInscription (bool, optional)            : Displays inscription details of assets inscribed on-chain.\n                                                    Defaults to False.</p>\n\n<p>Returns:\n    An object with the following keys:</p>\n\n<pre><code>jsonrpc (str): rpc version\nresult (obj) :\n        interface (str)             : The interface type of the asset.\n                                     Options: V1_NFT, V1_PRINT, LEGACY_NFT, V2_NFT, FungibleAsset,\n                                     FungibleToken, Custom, Identity, Executable, ProgrammableNFT\n\n        id (str)                    : The unique identifier of the asset.\n\n        content (obj)               : Content information of the asset.\n                    $schema (str)         : The schema URL for the asset metadata.\n                    json_uri (str)        : URI pointing to the JSON metadata.\n                    files (list of objs)  : Array of files associated with the asset.\n                            cdn_uri (str)       :\n                            mime (str)          :\n                            uri (str)           :\n                    metadata (obj)        : Metadata information about the asset.\n                            name (str)          : The name of the asset.\n                            symbol (str)        : The symbol of the asset.\n                    links (obj)           : External links related to the asset.\n                            image (str)         : URI to an image\n\n        authorities (list of obj)   : List of authorities associated with the asset.\n                    address (str)         : The authority's address.\n                    scopes (list of str)  : The scopes of authority.\n\n        compression (obj)           : Compression details of the asset.\n                    eligible (bool)       : Whether the asset is eligible for compression.\n                    compressed (bool)     : Whether the asset is currently compressed.\n                    data_hash (str)       : Hash of the asset data.\n                    creator_hash (str)    : Hash of the creator data.\n                    asset_hash (str)      : Hash of the entire asset.\n                    tree (str)            : Merkle tree address.\n                    seq (int)             : Sequence number.\n                    leaf_id (int)         : Leaf identifier in the merkle tree.\n\n        grouping (obj)              : Grouping information for the asset.\n                    group_key (str)       : The key identifying the group.\n                    group_value (str)     : The value associated with the group.\n\n        royalty (obj)               : Royalty information for the asset.\n                    royalty_model (str)         : The model used for royalties.\n                    target (str)                : The target address for royalties.\n                    percent (float)             : Royalty percentage.\n                    basis_points (int)          : Royalty basis points.\n                    primary_sale_happened (bool): Whether the primary sale has occurred.\n                    locked (bool)               : Whether the royalty is locked.\n\n        creators (list of objs)     : List of creators of the asset.\n                    address (str)       : The creator's address.\n                    share (int)         : The creator's share percentage.\n                    verified (bool)     : Whether the creator is verified.\n\n        ownership (obj)             : Ownership details of the asset.\n                    frozen (bool)        : Whether the asset is frozen.\n                    delegated (bool)     : Whether the asset is delegated.\n                    delegate (str)       : The delegate's address if delegated.\n                    ownership_model (str): The model of ownership.\n                    owner (str)          : The owner's address.\n\n        supply (obj)                : Supply information for the asset.\n                    print_max_supply (int)    : Maximum supply that can be printed.\n                    print_current_supply (int): Current printed supply.\n                    edition_nonce (int)       : Edition nonce.\n        mutable (bool)              : Whether the asset is mutable.\n        burnt (bool)                : Whether the asset has been burnt.\n        token_info (obj)            : Token-specific information.\n                    supply (int)           : Total token supply.\n                    decimals (int)         : Number of decimals.\n                    token_program (str)    : Token program ID.\n                    mint_authority (str)   : Mint authority address.\n                    freeze_authority (str) : Freeze authority address.\n                    symbol (str)           : Symbol of asset.\n                    price_info (obj)       : Current price of asset.\n                        currency (str)          : Base currency of quote e.g. \"USDC\"\n                        price_per_token (float) : Price e.g. 0.017219\n\nid (any): ID used in the request\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "heliuspy.api_versions.rpc20.ApiRPC20.get_assets_by_owner", "modulename": "heliuspy.api_versions.rpc20", "qualname": "ApiRPC20.get_assets_by_owner", "kind": "function", "doc": "<p>Get a list of assets owned by an address.</p>\n\n<p>This method is the fastest way to return all assets belonging to a wallet.</p>\n\n<p>Supported assets include NFTs, compressed NFTs (regular DAS), fungible tokens, and Token22.</p>\n\n<p>Helius Doc: <a href=\"https://docs.helius.dev/compression-and-das-api/digital-asset-standard-das-api/get-assets-by-owner\">https://docs.helius.dev/compression-and-das-api/digital-asset-standard-das-api/get-assets-by-owner</a></p>\n\n<p>Args:\n    owner_address (str)     : The owner address key.\n    page (int, optional)    : The page of results to return. Defaults to 1.\n    limit (int, optional)   : The maximum number of assets to return.\n    sortBy (dict, optional) : The sorting options for the response.\n                    sortBy (str)        : The criteria by which the retrieved assets will be sorted.\n                                            Options: created, recent_action, updated, none\n                    sortDirection (str) : The direction by which the retrieved assets will be sorted.\n                                            Options: asc, desc\n    options (bool, optional):\n                    showUnverifiedCollections (bool): Displays grouping information for unverified collections.\n                                                        Defaults to False.\n                    showCollectionMetadata (bool)   : Displays metadata for the collection. Defaults to False.\n                    showGrandTotal (bool)           : Shows the total number of assets. Slower request.\n                                                        Defaults to False.\n                    showFungible (bool)             : Shows fungible tokens. Defaults to False.\n                    showNativeBalance (bool)        : Shows the SOL balance held by the owner.\n                                                        Defaults to False.\n                    showInscription (bool)          : Displays inscription details. Defaults to False\n                    showZeroBalance (bool)          : Displays assets with zero balance. Defaults to False</p>\n\n<p>Returns:\n    An object with the following keys:</p>\n\n<pre><code>jsonrpc (str): rpc version\nresult (obj) :\n        cursor (str)        : Used for pagination\n        limit (int)         : Number of items results are limited to\n        total (int)         : Number of items in results\n        items (list of objs): List of assets. See `get_asset` for obj structure\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">owner_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "heliuspy.api_versions.v0", "modulename": "heliuspy.api_versions.v0", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.v0.Apiv0", "modulename": "heliuspy.api_versions.v0", "qualname": "Apiv0", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.v0.Apiv0.__init__", "modulename": "heliuspy.api_versions.v0", "qualname": "Apiv0.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "heliuspy.api_versions.v0.Apiv0.base_url", "modulename": "heliuspy.api_versions.v0", "qualname": "Apiv0.base_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.v0.Apiv0.api_key", "modulename": "heliuspy.api_versions.v0", "qualname": "Apiv0.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.v0.Apiv0.api_key_query", "modulename": "heliuspy.api_versions.v0", "qualname": "Apiv0.api_key_query", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.v0.Apiv0.request_id", "modulename": "heliuspy.api_versions.v0", "qualname": "Apiv0.request_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "heliuspy.api_versions.v0.Apiv0.get_parsed_transactions", "modulename": "heliuspy.api_versions.v0", "qualname": "Apiv0.get_parsed_transactions", "kind": "function", "doc": "<p>Parsed Transaction History for any given address.</p>\n\n<p>Helius Doc: <a href=\"https://docs.helius.dev/solana-apis/enhanced-transactions-api/parsed-transaction-history\">https://docs.helius.dev/solana-apis/enhanced-transactions-api/parsed-transaction-history</a></p>\n\n<p>Args:\n    address (str): The address to query for.\n    before (str): Start searching backwards from this transaction signature.\n    until (str): Search until this transaction signature.\n    commitment (str) : How finalized a block must be to be included in the search.\n                                  If not provided, will default to \"finalized\" commitment.\n                                  Note that \"processed\" level commitment is not supported.\n                                  Valid values: \"finalized\", \"confirmed\n    source (str): The TransactionSource to filter by\n    typeTransactionType (str):  The TransactionType to filter by.\n    limit(int): The number of transactions to retrieve. The value should be between 1 and 100.\n                  Defaults to 100</p>\n\n<p>Returns:\n    list of objs: list of enriched transactions data\n        description(str):\n        type(str): Transaction type e.g. 'SWAP'\n        source(str): e.g. 'JUPITER'\n        fee(int):\n        feePayer(str)\n        signature(str)\n        slot(int):\n        timestamp(int):\n        nativeTransfers(list of objs):\n                    fromUserAccount(str): The user account the sol is sent from.\n                    toUserAccount(str): The user account the sol is sent to.\n                    amount(int): The amount of sol sent (in lamports).\n        tokenTransfers(list of objs):\n                    fromUserAccount(str): The user account the tokens are sent from.\n                    toUserAccount(str): The user account the tokens are sent to.\n                    fromTokenAccount(str): The token account the tokens are sent from.\n                    toTokenAccount(str): The token account the tokens are sent to.\n                    tokenAmount(float): The number of tokens sent.\n                    mint(str): The mint account of the token.\n        accountData(list of objs):\n                    accountstring The account that this data is provided for.\n                    nativeBalanceChangenumber Native (SOL) balance change of the account.\n                    tokenBalanceChanges(list of objs):  Token balance changes of the account.\n                                userAccount(str):\n                                tokenAccount(str):\n                                mint(str):\n                                rawTokenAmount(obj):\n                                    tokenAmount(str):\n                                    decimals(int):\n        transactionError(obj):\n                    error(str)\n        instructions(list of objs):\n                accounts(list of strings): The accounts used in instruction.\n                data(str): Data passed into the instruction\n                programId(str): Program used in instruction\n                innerInstructions(list of objs): Inner instructions used in instruction\n                    accounts(list of strs):\n                    data(str):\n                    programID(str)\n        events(obj): Events associated with this transaction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">address</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "heliuspy.api_versions.v0.Apiv0.get_token_metadata", "modulename": "heliuspy.api_versions.v0", "qualname": "Apiv0.get_token_metadata", "kind": "function", "doc": "<p>Get both on-chain and off-chain metadata for Solana tokens.</p>\n\n<p>This Token Metadata endpoint returns all metadata associated with an account (Token/NFT),\nincluding data from the legacy token list. In a single request, you can pass up to 100 mint accounts.</p>\n\n<p>Helius Doc: <a href=\"https://docs.helius.dev/solana-apis/deprecated-token-metadata-api\">https://docs.helius.dev/solana-apis/deprecated-token-metadata-api</a></p>\n\n<p>Args:\n    mint_account (str)              : The mint account of the token to retrieve metadata for.\n    includeOffChain (bool, optional): Include offchain data referenced in the uri of the metadata account.\n                                        Defaults to False\n    disableCache (bool, optional)   : Disable usage of cache, useful for monitoring metadata changes.</p>\n\n<p>Returns:\n    list of objs: Token metadata stored both on-chain and in the old token list</p>\n\n<pre><code>    account (str)           : The mint account of the token\n\n    onChainAccountInfo (obj):\n            accountInfo (obj)  : Account data that is stored on-chain.\n                    key (str)          :\n                    isSigner (bool)    :\n                    isWritable (bool)  :\n                    data (obj)         :\n                            parsed (obj)    :\n                                    info (obj) :\n                                            decimals (int)        : e.g. 5\n                                            freezeAuthority (str) :\n                                            isInitialized (bool)  :\n                                            mintAuthority (str)   :\n                                            supply (str)          : e.g.  \"960390941527687\"\n                                    type (str) : e.g \"mint\"\n                            program (str)   :\n                            space (int)     :\n                    owner (str)        :\n                    executable (bool)  :\n                    lamports (int)     :\n                    rentEpoch (int)    :\n            error (str)        : Options: UNKNOWN, EMPTY_ACCOUNT, TIMEOUT, INVALID_ACCOUNT, INVALID_PUBKEY\n\n    onChainMetadata (obj)   : Metaplex metadata that is stored on-chain.\n            error (str)         :\n            metadata (obj)      :\n                    collection\n                    collectionDetails (obj)   :\n                    data (obj)                :\n                            creators (str)            :\n                            name (str)                : Name of token\n                            sellerFeeBasisPoints (int):\n                            symbol (str)              : Symbol of token\n                            uri (str)                 : URI for metadata\n                    editionNonce (int)        :\n                    isMutable (bool)          :\n                    key (str)                 :\n                    mint (str)                :\n                    primarySaleHappened (bool):\n                    tokenStandard (str)       :\n                    updateAuthority (str)     :\n                    uses (obj)                :\n                        remaining (int)             :\n                        total (int)                 :\n                        useMethod (str)             :\n    offChainMetadata (obj)  :\n    legacyMetadata (obj)    : Data from the old SPL token list.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mint_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "heliuspy.utils", "modulename": "heliuspy.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "heliuspy.utils.curl_helius", "modulename": "heliuspy.utils.curl_helius", "kind": "module", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();